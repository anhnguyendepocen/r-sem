shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("arm", "car", "chron", "coda", "coin", "colorspace", "colourpicker", "data.table", "date", "factoextra", "ggpmisc", "ggpubr", "ggrepel", "ggsci", "ggthemes", "git2r", "googleVis", "Hmisc", "hms", "htmlTable", "jsonlite", "knitr", "leaps", "maptools", "mclust", "nycflights13", "openssl", "optmatch", "party", "plotrix", "pls", "polynom", "progress", "psych", "qgraph", "Rcpp", "RcppArmadillo", "ReporteRs", "rgdal", "rgeos", "rmarkdown", "robCompositions", "robustbase", "rsconnect", "RSQLite", "rvg", "scatterplot3d", "shiny", "shinyjs", "simputation", "slam", "sp", "spdep", "survminer", "survMisc", "tidyr", "tmap", "tseries", "webshot", "xml2", "zoo"))
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("semTools")
runApp()
library(lavaan)
library(semTools)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
reliability(fit)
result=reliability(fit)
str(result)
result
result[5,]
sqrt(result[5,])
result[6,]=sqrt(result[5,])
result
str(result)
rbind(result,sqrt(result[5,]))
result=reliability(fit)
str(result)
result
rbind(result,sqrtave=sqrt(result[5,]))
result=reliability(fit)
str(result)
result
rbind(result,sqrt(ave)=sqrt(result[5,]))
result=reliability(fit)
str(result)
result
rbind(result,sqrtave=sqrt(result[5,]))
fit
inspect(fit,"covar")
inspect(fit,"std.lv")
result=reliability(fit)
result
inspect(fit,"std.lv")
inspect(fit,"std.lv")&psi
inspect(fit,"std.lv")$psi
result
inspect(fit,"std.lv")$psi
result=inspect(fit,"std.lv")$psi
result
res=inspect(fit,"std.lv")$psi
psi=inspect(fit,"std.lv")$psi
psi
str(psi)
psi
result
result=reliability(fit)
str(result)
result
rbind(result,sqrtave=sqrt(result[5,]))
result=rbind(result,sqrtave=sqrt(result[5,]))
result
summary(fit,standardized=TRUE)
psi=inspect(fit,"std.lv")$psi
str(psi)
psi
result
result
result
ncol(result)
result[-ncol(result)]
result[,-ncol(result)]
t(result[,-ncol(result)])
runApp()
psi
round(t(result[,-ncol(result)]),3)
fit <-sem(HS.model, data=HolzingerSwineford1939)
result=reliability(fit)
str(result)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
round(t(result[,-ncol(result)]),3)
runApp()
result=reliability(fit)
str(result)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
round(t(result),3)
as.data.frame(round(t(result),3))
df=as.data.frame(round(t(result),3))
df
df2Flextable(df)
df2Flextable(df,row.names=TRUE)
df2Flextable(df,rownames=TRUE)
df2Flextable(df,add.rownames=TRUE)
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
df2Flextable(df,add.rownames=TRUE)
shiny::runApp()
runApp()
runApp()
inspect(fit,"coeff")
library(lavaan)
library(semTools)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
inspect(fit,"coeff")
inspect(fit,"coef")
inspect(fit,"std")
inspect(fit,"std")$psi
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(round(t(result[,-ncol(result)]),3))
df
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(round(t(result[,-ncol(result)]),3))
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
df[5:6]
inspect(fit,"std")$psi
rdf=as.data.frame(inspect(fit,"std")$psi)
rdf
inspect(fit,"std")$psi
result=inspect(fit,"std")$psi
str(result)
inspect(fit,"std")$psi
result=inspect(fit,"std")$psi
diag(result)<-NA
result
rdf=as.data.frame(inspect(fit,"std")$psi)
rdf=as.data.frame(result)
rdf
cbind(rdf,df[5:6])
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(t(result[,-ncol(result)]))
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
df[5:6]
df2Flextable(df,add.rownames=TRUE)
result=inspect(fit,"std")$psi
diag(result)<-NA
result
rdf=as.data.frame(inspect(fit,"std")$psi)
rdf=as.data.frame(result)
rdf
cbind(rdf,df[5:6])
result=inspect(fit,"std")$psi
diag(result)<-NA
result
rdf=as.data.frame(result)
rdf
result=cbind(rdf,df[5:6])
result
rdf
apply(rdf,1,max)
apply(rdf,1,max(na.rm=TRUE))
apply(rdf,1,max,na.rm=TRUE)
apply(rdf,1,max,na.rm=TRUE)
str(apply(rdf,1,max,na.rm=TRUE))
df[[6]]>apply(rdf,1,max,na.rm=TRUE)
rdf
result=inspect(fit,"std")$psi
diag(result)<-NA
result
apply(rdf,1,max,na.rm=TRUE)
apply(result,1,max,na.rm=TRUE)
df[[6]]>apply(result,1,max,na.rm=TRUE)
disriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
disriminantValidity
rdf=as.data.frame(result)
result=cbind(rdf,df[5:6],disriminantValidity)
result
diag(result)<-1
rdf=as.data.frame(result)
df[[6]]>apply(rdf,1,max,na.rm=TRUE)
result=cbind(rdf,df[5:6],disriminantValidity)
result
result=inspect(fit,"std")$psi
diag(result)<-NA
result
disriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
disriminantValidity
diag(result)<-1
rdf=as.data.frame(result)
df[[6]]>apply(rdf,1,max,na.rm=TRUE)
result=cbind(rdf,df[5:6],disriminantValidity)
result
result=inspect(fit,"std")$psi
diag(result)<-NA
result
disriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
disriminantValidity
diag(result)<-1
rdf=as.data.frame(result)
result=cbind(rdf,df[5:6])
result
result=round(result,3)
result
result=cbind(result,disriminantValidity)
result
discriminantValidityTable=function(fit){
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(t(result[,-ncol(result)]))
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
result=inspect(fit,"std")$psi
diag(result)<-NA
disriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
disriminantValidity
diag(result)<-1
rdf=as.data.frame(result)
result=cbind(rdf,df[5:6])
result=round(result,3)
result=cbind(result,disriminantValidity)
result
}
discriminantValidityTable(fit)
df2Flextable(result)
df2Flextable(result,add.rownames = TRUE)
runApp()
runApp()
runApp()
runApp()
fit <-sem(HS.model, data=HolzingerSwineford1939)
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(t(result[,-ncol(result)]))
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
result=inspect(fit,"std")$psi
diag(result)<-NA
discriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
discriminantValidity
diag(result)<-1
rdf=as.data.frame(result)
rdf
result=cbind(rdf,df[5:6])
result=round(result,3)
result
result=cbind(result,discriminantValidity)
result
runApp()
model='knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
intervention ~ b*empathy + c*knowledge
empathy ~ a*knowledge
indirect effect:=a*b
total effect:=c+(a*b)'
fit=sem(model,data=ADHD)
fit
discriminantValidityTable(fit)
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(t(result[,-ncol(result)]))
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
df
result=inspect(fit,"std")$psi
diag(result)<-NA
discriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
discriminantValidity
diag(result)<-1
rdf=as.data.frame(result)
rdf
result=inspect(fit,"std")$psi
result
result=inspect(fit,"std")$psi
result
summary(fit)
result=inspect(fit,"std")
result
coef(fit)
inspect(fit)
inspect(fit,"est")
fitted(fit)
parameterEstimates(fit)
inspect(fit,"std")
inspect(fit,"std.lv")
inspect(fit,"cov.lv")
inspect(fit,"cor.lv")
runApp()
model='knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
intervention ~ b*empathy + c*knowledge
empathy ~ a*knowledge
indirect effect:=a*b
total effect:=c+(a*b)'
fit=sem(model,data=ADHD)
summary(fit)
fit=sem(model,data=ADHD)
summary(fit)
result=inspect(fit,"cor.lv")
result
summary(fit)
discriminantValidityTable=function(fit){
result=reliability(fit)
result=rbind(result,sqrtave=sqrt(result[5,]))
result
df=as.data.frame(t(result[,-ncol(result)]))
df
colnames(df)[5]="AVE"
colnames(df)[6]="sqrt(AVE)"
df
inspect(fit,"est")
fitted(fit)
parameterEstimates(fit)
result=inspect(fit,"cor.lv")
result
diag(result)<-NA
discriminantValidity<-df[[6]]>apply(result,1,max,na.rm=TRUE)
discriminantValidity
diag(result)<-1
rdf=as.data.frame(result)
rdf
result=cbind(rdf,df[5:6])
result=round(result,3)
result=cbind(result,discriminantValidity)
result
}
discriminantValidityTable(fit)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("semTools")
runApp()
install.packages("svglite")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
iris1=iris
selected=colnames(iris)[-1]
selected
iris[-selected]
selected
iris1[,-which(names(iris1) %in% selected)]
selected=colnames(iris)[-1:2]
selected
iris1[,-which(names(iris1) %in% selected)]
iris1=iris
iris1[,-which(names(iris1) %in% selected)]
selected
selected=colnames(iris)[-1:2]
selected
selected=colnames(iris)[-c(1:2)]
selected
iris1=iris
iris1[,-which(names(iris1) %in% selected)]
runApp()
runApp()
runApp()
iris
dplyr::mutate(iris,Sepal=Sepal.Length-Sepal.Width)
runApp()
mydf<-tryCatch(dplyr::mutate(iris,Sepal=Sepal.Length-Sepal.Width),error=function(e) "error")
class(mydf)
mydf<-tryCatch(dplyr::mutate(iris,Sepal=SePal.Length-Sepal.Width),error=function(e) "error")
class(mydf)
runApp()
iris
mydf<-tryCatch(dplyr::mutate(iris,Sepal=SePal.Length-Sepal.Width),error=function(e) "error")
class(mydf)
class(mydf)==data.frame
mydf<-tryCatch(dplyr::mutate(iris,Sepal=SePal.Length-Sepal.Width),error=function(e) "error")
class(mydf)
class(mydf)=="character"
mydf<-tryCatch(dplyr::mutate(iris,Sepal=Sepal.Length-Sepal.Width),error=function(e) "error")
class(mydf)
class(mydf)=="character"
iris
mydf<-tryCatch(dplyr::mutate(iris,Sepal=Sepal.Length-Sepal.Width),error=function(e) "error")
class(mydf)
class(mydf)=="data.frame"
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
MediationPlot
mediationPlot
runApp()
runApp()
runApp()
runApp()
runApp()
df2Flextable
myround
runApp()
shiny::runApp()
install.packages("rhandsontable")
install.packages("shinyTree")
install.packages("lavaan")
install.packages("semPlot")
install.packages("OpenMx")
shiny::runApp()
runApp()
install.packages("extrafont")
library(extrafont)
font_import()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
require(flextable)
ft=flextable(iris)
ft=flextable(iris[1:10,])
ft
require(rrtable)
ft=df2flextable(iris[1:10,])
ft
ft %>% (j=1:5,width=1:5)
ft %>% width(j=1:5,width=1:5)
ft %>% width(j=1:5,width=(1:5)/2)
runApp()
runApp()
shiny::runApp()
x=c(1,2,3)
y=c(TRUE,FALSE,TRUE)
df=data.frame(x,y)
df2flextable(df)
y=c(TRUE,FALSE,TRUE)
y1=as.character(y)
y1
df=data.frame(x,y1)
df2flextable(df)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
