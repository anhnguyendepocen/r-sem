c<-iy*2-r2^2-x2^2*r2^2/r1^2
x=(-b+c(1,-1)*sqrt(b^2-4*a*c))/2*a
}
result=x
result
}
find_intersect(-1,-1,2,3)
p=ggplot()+xlim(-5,5)+ylim(-5,5)+draw_line(-1,-1,2,3)
p
require(ggplot2)
p=ggplot()+xlim(-5,5)+ylim(-5,5)+draw_line(-1,-1,2,3)
p
draw_ellipse(p,a=4,b=1.5,x1=0,y1=2)
find_intersect(-1,-1,2,3)
find_intersect=function(x1,y1,x2,y2,r1=4,r2=1.5){
if(y1==y2){
# equation1=y1
# y1=y2+sqrt((1-(x-x2)^2/r1^2)*r2^2)
x=sqrt(1*r1^2)+x2
y=y1
result=c(x,y)
} else {
slope=(x2-x1)/(y2-y1)
intercept=-x1*(x2-x1)/(y2-y1)+y1
# equation1= slope*x+intercept
#  slope*x+intercept=y2+sqrt((1-(x-x2)^2/r1^2)*r2^2)
iy<-intercept-y2
# (slope*x+iy)^2=(1-(x-x2)^2/r1^2)*r2^2
# slope^2*x^2+2*slope*iy*x+iy*2=r2^2-(x^2-2*x2*x+x2^2)*r2^2/r1^2
# slope^2*x^2+2*slope*iy*x+iy*2=r2^2-r2^2/r1^2*x^2-r2^2/r1^2*2*x2*x+x2^2*r2^2/r1^2
# (slope^2+r2^2/r1^2)*x^2+(2*slope*iy+r2^2/r1^2*2*x2)*x+iy*2-r2^2-x2^2*r2^2/r1^2=0
a<-slope^2+r2^2/r1^2
b<-2*slope*iy+r2^2/r1^2*2*x2
c<-iy*2-r2^2-x2^2*r2^2/r1^2
x=(-b+c(1,-1)*sqrt(b^2-4*a*c))/2*a
x=x[(x>=x1-r1)&(x<=x+r1)]
y=slope*x+intercept
result=c(x,y)
}
result
}
find_intersect(-1,-1,2,3)
p
draw_ellipse(p,a=4,b=1.5,x1=0,y1=2)
find_intersect=function(x1,y1,x2,y2,r1=4,r2=1.5){
if(y1==y2){
# equation1=y1
# y1=y2+sqrt((1-(x-x2)^2/r1^2)*r2^2)
x=sqrt(1*r1^2)+x2
y=y1
} else {
slope=(x2-x1)/(y2-y1)
intercept=-x1*(x2-x1)/(y2-y1)+y1
# equation1= slope*x+intercept
#  slope*x+intercept=y2+sqrt((1-(x-x2)^2/r1^2)*r2^2)
iy<-intercept-y2
# (slope*x+iy)^2=(1-(x-x2)^2/r1^2)*r2^2
# slope^2*x^2+2*slope*iy*x+iy*2=r2^2-(x^2-2*x2*x+x2^2)*r2^2/r1^2
# slope^2*x^2+2*slope*iy*x+iy*2=r2^2-r2^2/r1^2*x^2-r2^2/r1^2*2*x2*x+x2^2*r2^2/r1^2
# (slope^2+r2^2/r1^2)*x^2+(2*slope*iy+r2^2/r1^2*2*x2)*x+iy*2-r2^2-x2^2*r2^2/r1^2=0
a<-slope^2+r2^2/r1^2
b<-2*slope*iy+r2^2/r1^2*2*x2
c<-iy*2-r2^2-x2^2*r2^2/r1^2
x=(-b+c(1,-1)*sqrt(b^2-4*a*c))/2*a
x=x[(x>=x1-r1)&(x<=x+r1)]
y=slope*x+intercept
}
result=data.frame(x,y)
result
}
find_intersect(-1,-1,2,3)
result=find_intersect(-1,-1,2,3)
result
draw_ellipse(p,a=4,b=1.5,x1=0,y1=2)+geom_point(data=result,aes(x=x,y=y))
require(semMediation)
devtools::install_github("cardiomoon/semMediation")
devtools::install_github("cardiomoon/semMediation")
shiny::runApp()
runApp()
require(shinyDND)
install.packages("shinyDND")
require(shinyDND)
runApp()
shiny::runApp()
source("makeEquation2.R")
set.seed(1234)
example1 <- data.frame(y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
x3 = rnorm(100))
set.seed(1234)
X <- rnorm(100)
M <- 0.5*X + rnorm(100)
Y <- 0.7*M + rnorm(100)
example2 <- data.frame(X , Y , M )
ADHD=read.csv("data/ADHD.csv")
model1='
visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
'
fit=sem(model1,data=HolzingerSwineford1939)
res=parameterEstimates(fit,standardized=TRUE)
res
df=fit2df(fit)
df
df1=addpos(df)
df1
df2=adjustPos(df1)
df
df1=addpos(df)
mediationPlot(fit)
semPaths(fit,rotation=2,whatLabels = "est")
require(semPlot)
semPaths(fit,rotation=2,whatLabels = "est")
require(semMedication)
require(semMediation)
mediationPlot(fit)
semPaths(fit,rotation=2,whatLabels = "est")
ADHD=read.csv("data/ADHD.csv")
df4=fit2df(fit4)
set.seed(1234)
example1 <- data.frame(y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
x3 = rnorm(100))
set.seed(1234)
X <- rnorm(100)
M <- 0.5*X + rnorm(100)
Y <- 0.7*M + rnorm(100)
example2 <- data.frame(X , Y , M )
ADHD=read.csv("data/ADHD.csv")
model1='
visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
'
fit=sem(model1,data=HolzingerSwineford1939)
res=parameterEstimates(fit,standardized=TRUE)
res
df=fit2df(fit)
df
df1=addpos(df)
mediationPlot(fit)
semPaths(fit,rotation=2,whatLabels = "est")
fit=sem(model2,data=example2)
res=parameterEstimates(fit,standardized=TRUE)
res
df=fit2df(fit)
df
df1=addpos(df)
df1
df2=adjustPos(df1)
semPaths(fit,rotation=2,whatLabels = "est",style="OpenMx")
mediationPlot(fit)+coord_fixed()
semPaths(fit,rotation=2,whatLabels = "std")
mediationPlot(fit,whatLabels = "std")
shiny::runApp()
install.packages("shinyTree")
runApp()
ADHD=read.csv("data/ADHD.csv")
model='
knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
intervention ~ b*empathy + c*knowledge
empathy ~ a*knowledge
indirect effect:=a*b
total effect:=c+(a*b)
'
fit=sem(model,data=ADHD)
semPaths(fit)
mediationPlot(fit)
mediationPlot(fit,width=8)
df=fit2df(fit)
require(semMediation)
require(semMediation)
require(lavaan)
require(semPlot)
str(이직데이터)
이직데이터=read.csv("childhood.csv",stringsAsFactors = FALSE)
str(이직데이터)
colnames(이직데이터)[7:10]=c("학습지도","보육과정","조직운영","의사소통")
colnames(이직데이터)[11:13]=c("정서적몰입","지속적몰입","규범적몰입")
colnames(이직데이터)[14]="이직의도"
model10='
직무스트레스=~스트레스_원아+스트레스_업무+스트레스_교사+스트레스_원장+스트레스_학부모+스트레스_보수
교사효능감=~학습지도+보육과정+조직운영+의사소통
몰입=~정서적몰입+지속적몰입+규범적몰입
'
X=c("직무스트레스")
M=c("몰입","교사효능감")
Y="이직의도"
effect=makeEquation(X,M,Y)
model11=paste0(model10,effect)
cat(model11)
fit=sem(model11,data=이직데이터)
(res=parameterEstimates(fit,standardized=TRUE))
par(family="AppleGothic")
semPaths(fit,rotation=2,whatLabels = "est",nCharNodes=0)
par(family="AppleGothic")
semPaths(fit,rotation=2,whatLabels = "est",nCharNodes=0)
mediationPlot(fit)
mediationPlot(fit,width=8,base_size=4)
mediationPlot(fit,width=8,base_size=4,mediationOnly=TRUE)
mediationPlot(fit,width=8,base_size=4,mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
indirect=TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
secondIndirect=TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
indirect=TRUE,secondIndirect = TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=TRUE,
indirect=TRUE,secondIndirect = TRUE)
model10='
직무스트레스=~스트레스_원아+스트레스_업무+스트레스_교사+스트레스_원장+스트레스_학부모+스트레스_보수
교육효능감=~학습지도+보육과정
조직효능감=~조직운영+의사소통
몰입=~정서적몰입+지속적몰입+규범적몰입
'
X=c("직무스트레스")
M=c("교육효능감","조직효능감","몰입")
Y="이직의도"
effect=makeEquation(X,M,Y)
model11=paste0(model10,effect)
cat(model11)
fit=sem(model11,data=이직데이터)
(res=parameterEstimates(fit,standardized=TRUE))
par(family="AppleGothic")
semPaths(fit,whatLabels = "est",nCharNodes=0)
semPaths(fit,rotation=2,whatLabels = "est",nCharNodes=0)
mediationPlot(fit,clean=FALSE,base_size=4,maxx=10)
mediationPlot(fit,clean=FALSE,base_size=4,maxx=10)
mediationPlot(fit,width=7,base_size=4)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
indirect=TRUE,secondIndirect = TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=TRUE,
indirect=TRUE,secondIndirect = TRUE)
require(semMediation)
require(semMediation)
require(lavaan)
require(semPlot)
이직데이터=read.csv("childhood.csv",stringsAsFactors = FALSE)
str(이직데이터)
colnames(이직데이터)[7:10]=c("학습지도","보육과정","조직운영","의사소통")
colnames(이직데이터)[11:13]=c("정서적몰입","지속적몰입","규범적몰입")
colnames(이직데이터)[14]="이직의도"
model10='
직무스트레스=~스트레스_원아+스트레스_업무+스트레스_교사+스트레스_원장+스트레스_학부모+스트레스_보수
몰입=~정서적몰입+지속적몰입+규범적몰입
'
X=c("직무스트레스")
M=c("몰입","교사효능감")
Y="이직의도"
effect=makeEquation(X,M,Y)
model11=paste0(model10,effect)
cat(model11)
fit=sem(model11,data=이직데이터)
(res=parameterEstimates(fit,standardized=TRUE))
fit=sem(model11,data=이직데이터)
이직데이터=read.csv("childhood.csv",stringsAsFactors = FALSE)
str(이직데이터)
colnames(이직데이터)[7:10]=c("학습지도","보육과정","조직운영","의사소통")
colnames(이직데이터)[11:13]=c("정서적몰입","지속적몰입","규범적몰입")
colnames(이직데이터)[14]="이직의도"
model10='
직무스트레스=~스트레스_원아+스트레스_업무+스트레스_교사+스트레스_원장+스트레스_학부모+스트레스_보수
교사효능감=~학습지도+보육과정+조직운영+의사소통
몰입=~정서적몰입+지속적몰입+규범적몰입
'
X=c("직무스트레스")
M=c("몰입","교사효능감")
Y="이직의도"
effect=makeEquation(X,M,Y)
model11=paste0(model10,effect)
cat(model11)
fit=sem(model11,data=이직데이터)
(res=parameterEstimates(fit,standardized=TRUE))
par(family="AppleGothic")
semPaths(fit,rotation=2,whatLabels = "est",nCharNodes=0)
mediationPlot(fit)
mediationPlot(fit)
mediationPlot(fit,width=8,base_size=4)
mediationPlot(fit,width=8,base_size=4,mediationOnly=TRUE)
mediationPlot(fit,width=8,base_size=4,mediationOnly=TRUE)
mediationPlot(fit,width=8,base_size=4,mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
indirect=TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
secondIndirect=TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
indirect=TRUE,secondIndirect = TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=TRUE,
indirect=TRUE,secondIndirect = TRUE)
model10='
직무스트레스=~스트레스_원아+스트레스_업무+스트레스_교사+스트레스_원장+스트레스_학부모+스트레스_보수
교육효능감=~학습지도+보육과정
조직효능감=~조직운영+의사소통
몰입=~정서적몰입+지속적몰입+규범적몰입
'
X=c("직무스트레스")
M=c("교육효능감","조직효능감","몰입")
Y="이직의도"
effect=makeEquation(X,M,Y)
model11=paste0(model10,effect)
cat(model11)
fit=sem(model11,data=이직데이터)
(res=parameterEstimates(fit,standardized=TRUE))
par(family="AppleGothic")
semPaths(fit,whatLabels = "est",nCharNodes=0)
semPaths(fit,rotation=2,whatLabels = "est",nCharNodes=0)
mediationPlot(fit,clean=FALSE,base_size=4,maxx=10)
mediationPlot(fit,width=7,base_size=4)
mediationPlot(fit,width=7,base_size=4)
mediationPlot(fit,width=8,base_size=4)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",residuals=FALSE,regression=FALSE,
indirect=TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",residuals=FALSE,regression=FALSE,
secondIndirect=TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=FALSE,
indirect=TRUE,secondIndirect = TRUE)
mediationPlot(fit,width=8,base_size=4,whatLabels="est",mediationOnly=TRUE,residuals=FALSE,regression=TRUE,
indirect=TRUE,secondIndirect = TRUE)
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
mtcars
mtcars
fit=lm(mpg~disp+hp+wt+cyl,data=mtcars)
summry(fit)
summary(fit)
require(lavaan)
require(semPlot)
model='mpg~disp+hp+wt+cyl'
summary(fit1)
fit1=sem(model,data=mtcars)
summary(fit1)
summary(fit)
semPaths(fit)
semPaths(fit,rotation=2)
semPaths(fit,rotation=2,residuals=FALSE)
semPaths(fit,rotation=2)
semPaths(fit,rotation=2,whatLabels = "est")
require(mediationPlot)
require(semMediation)
semPaths(fit1,rotation=2,whatLabels = "est")
semPaths(fit1,rotation=2,whatLabels = "est",residuals=FALSE)
mediationPlot(fit1)
mediationPlot(fit1,whatLabels = "est")
t
model='mpg~disp+hp+wt+cyl'
fit1=sem(model,data=mtcars)
summary(fit1)
semPaths(fit1,rotation=2,whatLabels = "est",residuals=FALSE)
mediationPlot(fit1,whatLabels = "est")
L
summary(fit1)
semPaths(fit1,rotation=2,whatLabels = "est",residuals=FALSE)
mediationPlot(fit1,whatLabels = "est")
mediationPlot(fit1,whatLabels = "est",residuals=FALSE)
summary(fit1)
mediationPlot(fit1,whatLabels = "est",residuals=FALSE)
semPaths(fit1,rotation=2,whatLabels = "est",residuals=FALSE)
mediationPlot(fit1,whatLabels = "est",residuals=FALSE)
mediationPlot(fit1,whatLabels = "est",residuals=FALSE,correlation=TRUE)
mediationPlot(fit1,whatLabels = "est",residuals=FALSE)
semPaths(fit1,rotation=2,whatLabels = "est",residuals=FALSE)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
dictionary=read.csv("dictionary.csv",fileEncoding="utf-8")
library(plyr)
translationContent <- read.csv("dictionary.csv",fileEncoding="utf-8")
translation <- dlply(translationContent ,.(key), function(s) key = as.list(s))
save(translation, file = "translation.bin")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
dictionary=read.csv("dictionary.csv",fileEncoding="utf-8")
library(plyr)
translationContent <- read.csv("dictionary.csv",fileEncoding="utf-8")
translation <- dlply(translationContent ,.(key), function(s) key = as.list(s))
save(translation, file = "translation.bin")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fit=sem(model,data=ADHD)
model='
knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
intervention ~ b*empathy + c*knowledge
empathy ~ a*knowledge
indirect effect:=a*b
total effect:=c+(a*b)
'
fit=sem(model,data=ADHD)
semPaths(fit)
semPaths(fit,layout="tree3")
semPaths(fit,roatation=2,layout="tree3")
semPaths(fit,rotation=2,layout="tree3")
semPaths(fit,rotation=2,layout="tree3",optimizeLatRes=TRUE)
semPaths(fit,rotation=2,layout="tree3",optimizeLatRes=TRUE,layoutSplit=TRUE)
semPaths(fit,rotation=2,layout="tree3",optimizeLatRes=TRUE)
semPaths(fit,rotation=2,layout="tree3",layoutSplit=TRUE)
semPaths(fit,rotation=2,layout="tree2",centerLevels=FALSE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree")
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree")
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree")
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree2",centerLevels=FALSE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree")
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree2",centerLevels=FALSE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",optimizeLatRes=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3")
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",optimizeLatRes=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",optimizeLatRes=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="tree3",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="circle",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=2,groups="latents",pastel=TRUE,
layout="circle2",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=1,groups="latents",pastel=TRUE,
layout="circle2",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=1,groups="latents",pastel=TRUE,
layout="circle",layoutSplit=TRUE)
semPaths(fit,"col","est",rotation=1,groups="latents",pastel=TRUE,
layout="circle3",layoutSplit=TRUE)
mediationPlot(fit,width=8)
semPaths(fit,rotation=2,layout="tree2",centerLevels=FALSE)
mediationPlot(fit,width=8)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df2Flextable
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("arm", "car", "chron", "coda", "coin", "colorspace", "colourpicker", "data.table", "date", "factoextra", "ggpmisc", "ggpubr", "ggrepel", "ggsci", "ggthemes", "git2r", "googleVis", "Hmisc", "hms", "htmlTable", "jsonlite", "knitr", "leaps", "maptools", "mclust", "nycflights13", "openssl", "optmatch", "party", "plotrix", "pls", "polynom", "progress", "psych", "qgraph", "Rcpp", "RcppArmadillo", "ReporteRs", "rgdal", "rgeos", "rmarkdown", "robCompositions", "robustbase", "rsconnect", "RSQLite", "rvg", "scatterplot3d", "shiny", "shinyjs", "simputation", "slam", "sp", "spdep", "survminer", "survMisc", "tidyr", "tmap", "tseries", "webshot", "xml2", "zoo"))
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
